
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

`default_nettype none

module de10_lite_top
  (

   //////////// CLOCK //////////
   input 	 ADC_CLK_10,
   input 	 MAX10_CLK1_50,
   input 	 MAX10_CLK2_50,

   //////////// SDRAM //////////
   output [12:0] DRAM_ADDR,
   output [1:0]  DRAM_BA,
   output 	 DRAM_CAS_N,
   output 	 DRAM_CKE,
   output 	 DRAM_CLK,
   output 	 DRAM_CS_N,
   inout [15:0]  DRAM_DQ,
   output 	 DRAM_LDQM,
   output 	 DRAM_RAS_N,
   output 	 DRAM_UDQM,
   output 	 DRAM_WE_N,

   //////////// SEG7 //////////
   output [7:0]  HEX0,
   output [7:0]  HEX1,
   output [7:0]  HEX2,
   output [7:0]  HEX3,
   output [7:0]  HEX4,
   output [7:0]  HEX5,

   //////////// KEY //////////
   input [1:0] 	 KEY, //when push, KEY = LO,

   //////////// LED //////////
   output [9:0]  LEDR,

   //////////// SW //////////
   input [9:0] 	 SW,  

   //////////// VGA //////////
   output [3:0]  VGA_B,
   output [3:0]  VGA_G,
   output 	 VGA_HS,
   output [3:0]  VGA_R,
   output 	 VGA_VS,

   //////////// Accelerometer //////////
   output 	 GSENSOR_CS_N,
   input [2:1] 	 GSENSOR_INT,
   output 	 GSENSOR_SCLK,
   inout 	 GSENSOR_SDI,
   inout 	 GSENSOR_SDO,

   //////////// Arduino //////////
   inout [15:0]  ARDUINO_IO,
   inout 	 ARDUINO_RESET_N,

   //////////// GPIO, GPIO connect to GPIO Default //////////
   inout [35:0]  GPIO
   );

	
	wire ext_xreset;
   assign ext_xreset = KEY[0];

	wire clk_100m;
	wire clk_sdram_out;
	
	wire pll_locked;
	
	pll_sys u_pll_sys
	(
		.areset(~ext_xreset),
		.inclk0(MAX10_CLK1_50),
		.c0(clk_100m),
		.c1(clk_sdram_out),
		.locked(pll_locked)
	);
	
	
   reg [25: 0] 	 temp;

   always @(posedge clk_100m) begin
      temp <= temp + 1'b1;
   end

   
   assign LEDR[0] = temp[25];
   assign LEDR[1] = temp[24];


  

	assign DRAM_CLK = clk_sdram_out;

   memif_top u_memif_top 
    (
     .ref_clk(clk_100m), //100MHz
     .reset(~pll_locked),
     .write_start_triger(SW[0]),
     .read_start_triger(SW[1]),
     //output wire 	local_init_done,

     //SDRAM Interface
     .memory_mem_a(DRAM_ADDR),  //[12: 0]
     .memory_mem_ba(DRAM_BA), //[1: 0]

     .memory_mem_cke(DRAM_CKE),
     .memory_mem_cs_n(DRAM_CS_N),

     .memory_mem_ras_n(DRAM_RAS_N),
     .memory_mem_cas_n(DRAM_CAS_N),
     .memory_mem_we_n(DRAM_WE_N),

     .memory_mem_dq(DRAM_DQ), //[15: 0]
     .memory_mem_dqm({DRAM_UDQM, DRAM_LDQM}) //[1: 0]


     );


   


endmodule

`default_nettype wire

